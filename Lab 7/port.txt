#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include "mpi.h"
#define REZERWA 500
#define PORT 1
#define START 2
#define REJS 3
#define KONIEC_REJSU 4
#define KATASTROFA 5
#define TANKUJ 5000
int paliwo = 5000;
int DOKUJ=1, NIE_DOKUJ=0;
int liczba_procesow;
int nr_procesu;
int ilosc_statkow;
int ilosc_portow=4;
int ilosc_zajetych_portow=0;
int tag=1;
int wyslij[2];
int odbierz[2];
MPI_Status mpi_status;
void Wyslij(int nr_statku, int stan){
	wyslij[0]=nr_statku;
	wyslij[1]=stan;
	MPI_Send(&wyslij, 2, MPI_INT, 0, tag, MPI_COMM_WORLD);
	sleep(1);
}
void Port(int liczba_procesow){
	int nr_statku,status;
	ilosc_statkow = liczba_procesow -1;
	printf("Symulator portu\n");
	printf("____________________\n");
	if(rand()%2==1){
		printf("Nie prognozujemy sztormow na dzis\n");
	}
	else{
		printf("Przewidywane sztormy\n");
	}
	printf("Milego rejsu \n \n \n");
	printf("Dysponujemy %d portami\n", ilosc_portow);
	sleep(2);
	while(ilosc_portow<=ilosc_statkow){
		MPI_Recv(&odbierz,2,MPI_INT,MPI_ANY_SOURCE,tag,MPI_COMM_WORLD, &mpi_status);
		nr_statku=odbierz[0];
		status=odbierz[1];
		if(status==1){
			printf("Statek %d stoi w porcie\n", nr_statku);
		}
		if(status==2){
			printf("Statek %d prosi o pozwolenie na odplyniecie z portu %d\n", nr_statku, ilosc_zajetych_portow);
			ilosc_zajetych_portow--;
		}
		if(status==3){
			printf("Statek %d plywa\n", nr_statku);
		}
		if(status==4){
			if(ilosc_zajetych_portow<ilosc_portow){
				ilosc_zajetych_portow++;
				MPI_Send(&DOKUJ, 1, MPI_INT, nr_statku, tag, MPI_COMM_WORLD);
			}
			else{
				MPI_Send(&NIE_DOKUJ, 1, MPI_INT, nr_statku, tag, MPI_COMM_WORLD);
			}
		}
		if(status==5){
			ilosc_statkow--;
			printf("Ilosc statkow %d\n", ilosc_statkow);
		}
	}
	printf("Program zakonczyl dzialanie:)\n");
}
void Statek(){
	int  stan,suma,i;
	stan=REJS;
	while(1){
		if(stan==1){
			if(rand()%2==1){
				stan=START;
				paliwo=TANKUJ;
				printf("Statek numer %d prosi o pozwolenie na wyplyniecie\n",nr_procesu);
				Wyslij(nr_procesu,stan);
			}
			else{
				Wyslij(nr_procesu,stan);
			}
		}
		else if(stan==2){
			printf("Statek %d wyplywa\n",nr_procesu);
			stan=REJS;
			Wyslij(nr_procesu,stan);
		}
		else if(stan==3){
			paliwo-=rand()%500;
			// spalilem troche paliwa
			if(paliwo<=REZERWA){
				stan=KONIEC_REJSU;
				printf("prosze o pozwolenie na dokowanie\n");
				Wyslij(nr_procesu,stan);
			}
			else{
				for(i=0; rand()%10000;i++);
			}
		}
		else if(stan==4){
			int temp;
			MPI_Recv(&temp, 1, MPI_INT, 0, tag, MPI_COMM_WORLD, &mpi_status);
			if(temp==DOKUJ){
				stan=PORT;
				printf("Statek numer %d zacumowal\n", nr_procesu);
			}
			else{
				paliwo-=rand()%500;
				if(paliwo>0){
					Wyslij(nr_procesu,stan);
				}
				else{
					stan=KATASTROFA;
					printf("utonalem\n");
					Wyslij(nr_procesu,stan);
					return;
				 }
			 }
		 }
	 }
 }
int main(int argc, char *argv[]){
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&nr_procesu);
	MPI_Comm_size(MPI_COMM_WORLD,&liczba_procesow);
	srand(time(NULL));
	if(nr_procesu == 0)
		Port(liczba_procesow);
	else
		Statek();
		MPI_Finalize();
	return 0;
}

